{% extends "base.html" %}

{% block window_title %}{{ draft.title }} - Draft Mode{% endblock %}

{% block breadcrumb %}
<div class="breadcrumb">
    <a href="{{ url_for('main.dashboard') }}">Dashboard</a>
    <span class="breadcrumb-separator">►</span>
    <span style="color: var(--accent-green);">{{ draft.title }}</span>
    <span class="breadcrumb-separator">►</span>
    <span style="color: var(--text-secondary);">Editor</span>
</div>
{% endblock %}

{% block extra_css %}
<style>
    .editor-toolbar {
        background: var(--bg-tertiary);
        border-bottom: 1px solid var(--border-primary);
        padding: 12px 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 12px;
    }

    .toolbar-left {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-wrap: wrap;
    }

    .toolbar-center {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-wrap: wrap;
    }

    .toolbar-right {
        display: flex;
        gap: 8px;
        align-items: center;
        flex-wrap: wrap;
    }

    .version-selector {
        padding: 6px 12px;
        background: var(--bg-secondary);
        border: 1px solid var(--border-primary);
        color: var(--text-primary);
        font-family: inherit;
        font-size: 10px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        min-width: 140px;
    }

    .version-selector:focus {
        outline: none;
        border-color: var(--accent-green);
        box-shadow: 0 0 0 1px var(--accent-green);
    }

    .current-version-info {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 10px;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .version-badge {
        padding: 2px 6px;
        font-size: 8px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 1px solid;
        box-shadow: 0 0 4px;
    }

    .version-badge.active {
        background: var(--accent-yellow);
        color: var(--bg-primary);
        border-color: var(--accent-yellow);
        box-shadow: 0 0 4px var(--accent-yellow);
    }

    .version-badge.final {
        background: var(--accent-green);
        border-color: var(--accent-green);
        box-shadow: 0 0 4px var(--accent-green);
        color: var(--bg-primary);
    }

    .save-status {
        font-size: 10px;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
        display: flex;
        align-items: center;
        gap: 6px;
    }

    .save-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: var(--accent-green);
        box-shadow: 0 0 4px var(--accent-green);
        animation: pulse 2s infinite;
    }

    .save-indicator.saving {
        background: var(--accent-yellow);
        box-shadow: 0 0 4px var(--accent-yellow);
    }

    .save-indicator.error {
        background: var(--accent-red);
        box-shadow: 0 0 4px var(--accent-red);
    }

    @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
    }

    .editor-container {
        display: flex;
        height: calc(100vh - 280px);
        min-height: 500px;
        gap: 2px;
        background: var(--border-primary);
    }

    .editor-panel {
        flex: 1;
        display: flex;
        flex-direction: column;
        background: var(--bg-secondary);
        min-width: 0;
    }

    .panel-header {
        background: var(--bg-tertiary);
        border-bottom: 1px solid var(--border-primary);
        padding: 8px 16px;
        display: flex;
        align-items: center;
        justify-content: space-between;
        font-size: 11px;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--text-primary);
    }

    .panel-badge {
        padding: 2px 6px;
        background: var(--accent-green);
        color: var(--bg-primary);
        font-size: 8px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        border: 1px solid var(--accent-green);
        box-shadow: 0 0 4px var(--accent-green);
    }

    .panel-badge.preview {
        background: var(--accent-blue);
        border-color: var(--accent-blue);
        box-shadow: 0 0 4px var(--accent-blue);
    }

    .editor-content {
        flex: 1;
        padding: 0;
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        position: relative;
    }

    .editor-textarea {
        width: 100%;
        height: 100%;
        padding: 16px;
        border: none;
        outline: none;
        background: var(--bg-primary);
        color: var(--text-primary);
        font-family: 'JetBrains Mono', monospace;
        font-size: 13px;
        line-height: 1.6;
        resize: none;
        white-space: pre-wrap;
        overflow-wrap: break-word;
    }

    .editor-textarea::placeholder {
        color: var(--text-muted);
        font-style: italic;
    }

    .editor-textarea:focus {
        background: var(--bg-primary);
    }

    .preview-content {
        flex: 1;
        padding: 16px;
        background: var(--bg-primary);
        border: 1px solid var(--border-primary);
        overflow-y: auto;
        font-size: 14px;
        line-height: 1.6;
        color: var(--text-primary);
    }

    .preview-content h1,
    .preview-content h2,
    .preview-content h3,
    .preview-content h4,
    .preview-content h5,
    .preview-content h6 {
        color: var(--accent-green);
        margin-bottom: 12px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        text-shadow: var(--glow-primary);
    }

    .preview-content h1 { font-size: 24px; border-bottom: 2px solid var(--accent-green); padding-bottom: 8px; }
    .preview-content h2 { font-size: 20px; }
    .preview-content h3 { font-size: 16px; }

    .preview-content p {
        margin-bottom: 16px;
        color: var(--text-primary);
    }

    .preview-content code {
        background: var(--bg-tertiary);
        color: var(--accent-green);
        padding: 2px 6px;
        border: 1px solid var(--border-primary);
        font-family: 'JetBrains Mono', monospace;
        font-size: 12px;
    }

    .preview-content pre {
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        padding: 16px;
        overflow-x: auto;
        margin-bottom: 16px;
        position: relative;
    }

    .preview-content pre::before {
        content: 'CODE';
        position: absolute;
        top: 4px;
        right: 8px;
        font-size: 8px;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 1px;
    }

    .preview-content pre code {
        background: none;
        border: none;
        padding: 0;
        color: var(--text-primary);
    }

    .preview-content blockquote {
        border-left: 3px solid var(--accent-green);
        padding-left: 16px;
        margin: 16px 0;
        color: var(--text-secondary);
        font-style: italic;
    }

    .preview-content ul, .preview-content ol {
        margin-bottom: 16px;
        padding-left: 20px;
    }

    .preview-content li {
        margin-bottom: 4px;
        color: var(--text-primary);
    }

    .action-bar {
        background: var(--bg-tertiary);
        border-top: 1px solid var(--border-primary);
        padding: 12px 16px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        flex-wrap: wrap;
        gap: 12px;
    }

    .draft-info {
        font-size: 10px;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
        align-items: center;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        z-index: 2000;
        backdrop-filter: blur(4px);
    }

    .modal-content {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: var(--bg-secondary);
        border: 2px solid var(--border-primary);
        padding: 24px;
        min-width: 300px;
        max-width: 90vw;
        box-shadow: 0 8px 32px rgba(0, 255, 65, 0.2);
    }

    .modal-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 16px;
        padding-bottom: 8px;
        border-bottom: 1px solid var(--border-primary);
    }

    .modal-title {
        font-size: 14px;
        font-weight: 700;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        color: var(--text-primary);
    }

    .modal-close {
        background: none;
        border: 1px solid var(--border-primary);
        color: var(--text-muted);
        cursor: pointer;
        padding: 4px 8px;
        font-size: 12px;
    }

    .modal-close:hover {
        color: var(--accent-red);
        border-color: var(--accent-red);
    }

    /* Mobile responsiveness */
    @media (max-width: 768px) {
        .editor-container {
            flex-direction: column;
            height: auto;
        }

        .editor-panel {
            min-height: 300px;
        }

        .editor-toolbar {
            flex-direction: column;
            align-items: stretch;
            gap: 8px;
        }

        .toolbar-left,
        .toolbar-center,
        .toolbar-right {
            justify-content: center;
        }

        .preview-content {
            font-size: 13px;
        }

        .action-bar {
            flex-direction: column;
            align-items: stretch;
            gap: 8px;
        }

        .action-buttons {
            justify-content: center;
        }
    }

    /* Loading states */
    .loading {
        position: relative;
        overflow: hidden;
    }

    .loading::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 100%;
        height: 100%;
        background: linear-gradient(90deg, transparent, rgba(0, 255, 65, 0.2), transparent);
        animation: loading-sweep 1.5s infinite;
    }

    @keyframes loading-sweep {
        0% { left: -100%; }
        100% { left: 100%; }
    }

    .share-link-display {
        margin-top: 12px;
        padding: 8px;
        background: var(--bg-tertiary);
        border: 1px solid var(--border-primary);
        font-size: 10px;
        color: var(--text-secondary);
        word-break: break-all;
    }
</style>
{% endblock %}

{% block content %}
<div class="editor-toolbar">
    <div class="toolbar-left">
        <button id="saveBtn" class="btn primary">Save Version</button>
        <button id="newVersionBtn" class="btn">New Version</button>
        <div class="save-status">
            <div class="save-indicator" id="saveIndicator"></div>
            <span id="saveStatus">Ready</span>
        </div>
    </div>
    
    <div class="toolbar-center">
        <div class="current-version-info">
            <span>Current:</span>
            <select id="versionSelector" class="version-selector" onchange="switchVersion(this.value)">
                {% for version in versions %}
                    <option value="{{ version.id }}" {% if version.id == current_version.id %}selected{% endif %}>
                        {{ version.version_name }}
                        {% if 'final' in version.version_name.lower() or 'published' in version.version_name.lower() %} [FINAL]{% endif %}
                    </option>
                {% endfor %}
            </select>
            {% if 'final' in current_version.version_name.lower() or 'published' in current_version.version_name.lower() %}
                <span class="version-badge final">Final</span>
            {% else %}
                <span class="version-badge active">Draft</span>
            {% endif %}
        </div>
        
        <button id="markFinalBtn" class="btn" style="background: var(--accent-yellow); color: var(--bg-primary); border-color: var(--accent-yellow);">
            Mark as Final
        </button>
        
        <button id="renameVersionBtn" class="btn">Rename Version</button>
    </div>
    
    <div class="toolbar-right">
        <label for="compareVersion" style="font-size: 10px; text-transform: uppercase; color: var(--text-muted);">Compare:</label>
        <select id="compareVersion" class="version-selector">
            <option value="">Select version...</option>
            {% for version in versions %}
                {% if version.id != current_version.id %}
                <option value="{{ version.id }}">{{ version.version_name }}</option>
                {% endif %}
            {% endfor %}
        </select>
        <button id="shareBtn" class="btn">Share</button>
        <a href="{{ url_for('main.dashboard') }}" class="btn">← Dashboard</a>
    </div>
</div>

<div class="editor-container">
    <div class="editor-panel">
        <div class="panel-header">
            <span>{{ current_version.version_name }}</span>
            <span class="panel-badge">Editor</span>
        </div>
        <div class="editor-content">
            <textarea 
                id="contentEditor" 
                class="editor-textarea" 
                placeholder="# Start writing your blog post in Markdown...

## Use headers, **bold text**, and *italics*

```javascript
// Code blocks are supported too!
console.log('Hello, Draft Mode!');
```

> Blockquotes for emphasis

- Bullet points
- And numbered lists work great

Ready to begin? Start typing and watch the preview update in real-time!"
            >{{ current_version.content }}</textarea>
        </div>
    </div>
    
    <div class="editor-panel">
        <div class="panel-header">
            <span>Live Preview</span>
            <span class="panel-badge preview">Preview</span>
        </div>
        <div id="previewContent" class="preview-content">
            <!-- Preview content will be loaded here -->
        </div>
    </div>
</div>

<div class="action-bar">
    <div class="draft-info">
        Draft: {{ draft.title }} • Created {{ draft.created_at.strftime('%m/%d/%Y') }} • {{ draft.versions|length }} version(s)
    </div>
    <div class="action-buttons">
        <button id="exportBtn" class="btn">Export .MD</button>
        <button id="fullscreenBtn" class="btn">Fullscreen</button>
    </div>
</div>

<!-- New Version Modal -->
<div id="newVersionModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Create New Version</h3>
            <button class="modal-close" id="closeModalBtn">✕</button>
        </div>
        <div class="form-group">
            <label for="newVersionName">Version Name</label>
            <input type="text" id="newVersionName" placeholder="e.g. v2.0, Draft 2, Final Edit">
        </div>
        <div style="margin-top: 20px; display: flex; gap: 8px;">
            <button id="createVersionBtn" class="btn primary">Create Version</button>
            <button id="cancelVersionBtn" class="btn">Cancel</button>
        </div>
    </div>
</div>

<!-- Rename Version Modal -->
<div id="renameVersionModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Rename Version</h3>
            <button class="modal-close" id="closeRenameModalBtn">✕</button>
        </div>
        <div class="form-group">
            <label for="renameVersionName">Version Name</label>
            <input type="text" id="renameVersionName" placeholder="Enter new version name">
        </div>
        <div style="margin-top: 20px; display: flex; gap: 8px;">
            <button id="confirmRenameVersionBtn" class="btn primary">Rename</button>
            <button id="cancelRenameVersionBtn" class="btn">Cancel</button>
        </div>
    </div>
</div>

<!-- Mark as Final Modal -->
<div id="markFinalModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Mark as Final</h3>
            <button class="modal-close" id="closeFinalModalBtn">✕</button>
        </div>
        <div style="margin-bottom: 16px;">
            <p style="color: var(--text-secondary); font-size: 12px; margin-bottom: 12px;">
                This will rename the current version to include "Final" in the name and mark it as the definitive version.
            </p>
            <div class="form-group">
                <label for="finalVersionName">Final Version Name</label>
                <input type="text" id="finalVersionName" placeholder="e.g. Final Draft, Published Version">
            </div>
        </div>
        <div style="margin-top: 20px; display: flex; gap: 8px;">
            <button id="confirmMarkFinalBtn" class="btn" style="background: var(--accent-yellow); color: var(--bg-primary); border-color: var(--accent-yellow);">Mark as Final</button>
            <button id="cancelMarkFinalBtn" class="btn">Cancel</button>
        </div>
    </div>
</div>

<!-- Share Modal -->
<div id="shareModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Share Version</h3>
            <button class="modal-close" id="closeShareModalBtn">✕</button>
        </div>
        <div style="margin-bottom: 16px;">
            <p style="color: var(--text-secondary); font-size: 12px; margin-bottom: 12px;">
                Generate a public link to share this version with others. Anyone with the link can view it without logging in.
            </p>
            <div id="shareLinkContainer" style="display: none;">
                <label>Share Link:</label>
                <div class="share-link-display" id="shareLink"></div>
                <button id="copyLinkBtn" class="btn" style="margin-top: 8px;">Copy Link</button>
            </div>
        </div>
        <div style="margin-top: 20px; display: flex; gap: 8px;">
            <button id="generateShareLinkBtn" class="btn primary">Generate Share Link</button>
            <button id="cancelShareBtn" class="btn">Cancel</button>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script>
    let currentVersionId = {{ current_version.id }};
    let draftId = {{ draft.id }};
    let autoSaveTimeout;
    let lastSavedContent = document.getElementById('contentEditor').value;
    
    // Version switching
    function switchVersion(versionId) {
        if (versionId && versionId != currentVersionId) {
            // Save current content before switching
            const content = document.getElementById('contentEditor').value;
            if (content !== lastSavedContent) {
                if (confirm('You have unsaved changes. Save before switching versions?')) {
                    fetch(`/save_version/${currentVersionId}`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content: content })
                    }).then(() => {
                        window.location.href = `/draft/${draftId}?version=${versionId}`;
                    });
                    return;
                }
            }
            window.location.href = `/draft/${draftId}?version=${versionId}`;
        }
    }
    
    // Save status management
    function updateSaveStatus(status, type = 'ready') {
        const indicator = document.getElementById('saveIndicator');
        const statusText = document.getElementById('saveStatus');
        
        indicator.className = 'save-indicator';
        if (type === 'saving') indicator.classList.add('saving');
        if (type === 'error') indicator.classList.add('error');
        
        const now = new Date();
        statusText.textContent = `${status} ${now.toLocaleTimeString()}`;
    }
    
    // Auto-save functionality
    function autoSave() {
        const content = document.getElementById('contentEditor').value;
        if (content !== lastSavedContent) {
            updateSaveStatus('Saving...', 'saving');
            
            fetch(`/save_version/${currentVersionId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ content: content })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    lastSavedContent = content;
                    updateSaveStatus('Auto-saved', 'ready');
                } else {
                    updateSaveStatus('Save failed', 'error');
                }
            })
            .catch(() => {
                updateSaveStatus('Save failed', 'error');
            });
        }
    }
    
    // Preview update
    function updatePreview() {
        const content = document.getElementById('contentEditor').value;
        const previewContent = document.getElementById('previewContent');
        
        previewContent.classList.add('loading');
        
        fetch(`/preview/${currentVersionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content: content })
        })
        .then(response => response.json())
        .then(data => {
            previewContent.innerHTML = data.html;
            previewContent.classList.remove('loading');
        })
        .catch(() => {
            previewContent.innerHTML = '<p style="color: var(--accent-red);">Preview unavailable</p>';
            previewContent.classList.remove('loading');
        });
    }
    
    // Event listeners
    document.getElementById('contentEditor').addEventListener('input', function() {
        clearTimeout(autoSaveTimeout);
        autoSaveTimeout = setTimeout(autoSave, 2000);
        updatePreview();
    });
    
    document.getElementById('saveBtn').addEventListener('click', function() {
        const content = document.getElementById('contentEditor').value;
        updateSaveStatus('Saving...', 'saving');
        
        fetch(`/save_version/${currentVersionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content: content })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                lastSavedContent = content;
                updateSaveStatus('Saved', 'ready');
            } else {
                updateSaveStatus('Save failed', 'error');
            }
        });
    });
    
    // Modal management
    const modal = document.getElementById('newVersionModal');
    const renameModal = document.getElementById('renameVersionModal');
    const finalModal = document.getElementById('markFinalModal');
    const shareModal = document.getElementById('shareModal');
    const newVersionBtn = document.getElementById('newVersionBtn');
    const renameVersionBtn = document.getElementById('renameVersionBtn');
    const markFinalBtn = document.getElementById('markFinalBtn');
    const shareBtn = document.getElementById('shareBtn');
    
    // New version modal
    newVersionBtn.addEventListener('click', () => {
        modal.style.display = 'block';
        document.getElementById('newVersionName').focus();
    });
    
    [document.getElementById('closeModalBtn'), document.getElementById('cancelVersionBtn')].forEach(btn => {
        btn.addEventListener('click', () => {
            modal.style.display = 'none';
            document.getElementById('newVersionName').value = '';
        });
    });
    
    // Rename version modal
    renameVersionBtn.addEventListener('click', () => {
        const currentName = document.querySelector('#versionSelector option:checked').textContent.trim();
        document.getElementById('renameVersionName').value = currentName.replace(' [FINAL]', '');
        renameModal.style.display = 'block';
        document.getElementById('renameVersionName').focus();
    });
    
    [document.getElementById('closeRenameModalBtn'), document.getElementById('cancelRenameVersionBtn')].forEach(btn => {
        btn.addEventListener('click', () => {
            renameModal.style.display = 'none';
            document.getElementById('renameVersionName').value = '';
        });
    });
    
    // Mark as final modal
    markFinalBtn.addEventListener('click', () => {
        const currentName = document.querySelector('#versionSelector option:checked').textContent.trim();
        const suggestedName = currentName.includes('Final') ? currentName : currentName + ' - Final';
        document.getElementById('finalVersionName').value = suggestedName.replace(' [FINAL]', '');
        finalModal.style.display = 'block';
        document.getElementById('finalVersionName').focus();
    });
    
    [document.getElementById('closeFinalModalBtn'), document.getElementById('cancelMarkFinalBtn')].forEach(btn => {
        btn.addEventListener('click', () => {
            finalModal.style.display = 'none';
            document.getElementById('finalVersionName').value = '';
        });
    });
    
    // Share modal
    shareBtn.addEventListener('click', () => {
        shareModal.style.display = 'block';
        document.getElementById('shareLinkContainer').style.display = 'none';
    });
    
    [document.getElementById('closeShareModalBtn'), document.getElementById('cancelShareBtn')].forEach(btn => {
        btn.addEventListener('click', () => {
            shareModal.style.display = 'none';
            document.getElementById('shareLinkContainer').style.display = 'none';
        });
    });
    
    // Close modals on outside click
    [modal, renameModal, finalModal, shareModal].forEach(m => {
        m.addEventListener('click', (e) => {
            if (e.target === m) {
                m.style.display = 'none';
            }
        });
    });
    
    // Create version
    document.getElementById('createVersionBtn').addEventListener('click', function() {
        const versionName = document.getElementById('newVersionName').value.trim();
        if (!versionName) {
            alert('Please enter a version name');
            return;
        }
        
        const content = document.getElementById('contentEditor').value;
        const formData = new FormData();
        formData.append('version_name', versionName);
        formData.append('content', content);
        
        fetch(`/create_version/${draftId}`, {
            method: 'POST',
            body: formData
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            }
        });
    });
    
    // Rename version
    document.getElementById('confirmRenameVersionBtn').addEventListener('click', function() {
        const newName = document.getElementById('renameVersionName').value.trim();
        if (!newName) {
            alert('Please enter a version name');
            return;
        }
        
        fetch(`/rename_version/${currentVersionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: newName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to rename version');
            }
        });
    });
    
    // Mark as final
    document.getElementById('confirmMarkFinalBtn').addEventListener('click', function() {
        const finalName = document.getElementById('finalVersionName').value.trim();
        if (!finalName) {
            alert('Please enter a final version name');
            return;
        }
        
        fetch(`/mark_final/${currentVersionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ name: finalName })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                location.reload();
            } else {
                alert('Failed to mark as final: ' + (data.error || 'Unknown error'));
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to mark as final');
        });
    });
    
    // Generate share link
    document.getElementById('generateShareLinkBtn').addEventListener('click', function() {
        fetch(`/generate_share_link/${currentVersionId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                document.getElementById('shareLink').textContent = data.share_url;
                document.getElementById('shareLinkContainer').style.display = 'block';
            } else {
                alert('Failed to generate share link');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Failed to generate share link');
        });
    });
    
    // Copy link
    document.getElementById('copyLinkBtn').addEventListener('click', function() {
        const shareLink = document.getElementById('shareLink').textContent;
        navigator.clipboard.writeText(shareLink).then(() => {
            this.textContent = 'Copied!';
            setTimeout(() => {
                this.textContent = 'Copy Link';
            }, 2000);
        }).catch(() => {
            alert('Failed to copy link to clipboard');
        });
    });
    
    // Compare versions
    document.getElementById('compareVersion').addEventListener('change', function() {
        const compareVersionId = this.value;
        if (compareVersionId) {
            window.open(`/compare/${currentVersionId}/${compareVersionId}`, '_blank');
        }
    });
    
    // Export functionality
    document.getElementById('exportBtn').addEventListener('click', function() {
        const content = document.getElementById('contentEditor').value;
        const blob = new Blob([content], { type: 'text/markdown' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `{{ draft.title }}.md`;
        a.click();
        URL.revokeObjectURL(url);
    });
    
    // Fullscreen toggle
    document.getElementById('fullscreenBtn').addEventListener('click', function() {
        const container = document.querySelector('.editor-container');
        if (!document.fullscreenElement) {
            container.requestFullscreen();
            this.textContent = 'Exit Fullscreen';
        } else {
            document.exitFullscreen();
            this.textContent = 'Fullscreen';
        }
    });
    
    // Keyboard shortcuts
    document.addEventListener('keydown', function(e) {
        if (e.ctrlKey || e.metaKey) {
            switch(e.key) {
                case 's':
                    e.preventDefault();
                    document.getElementById('saveBtn').click();
                    break;
                case 'n':
                    e.preventDefault();
                    document.getElementById('newVersionBtn').click();
                    break;
            }
        }
    });
    
    // Initial preview load
    updatePreview();
    updateSaveStatus('Ready', 'ready');
</script>
{% endblock %}